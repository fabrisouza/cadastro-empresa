# Criado por https://www.toptal.com/developers/gitignore/api/django
# Edite em https://www.toptal.com/developers/gitignore?templates=django

### Django ###
*.registro
*.Panela
* .pyc
__pycache__/
*/__pycache__/
*/**.pyc
local_settings.py
db.sqlite3
db.sqlite3-journal
meios de comunicação

# Se o seu processo de construção inclui a execução de collectstatic, então você provavelmente não precisa ou deseja incluir staticfiles /
# em seu repositório Git. Atualize e descomente a seguinte linha de acordo.
# <django-project-name> / staticfiles /

### Django.Python Stack ###
# Arquivos compilados por byte / otimizados / DLL
* .py [cod]
* $ py.class

# Extensões C
*.tão

# Distribuição / embalagem
.Pitão
construir/
ovos de desenvolvimento /
dist /
Transferências/
ovos/
.ovos/
lib /
lib64 /
partes /
sdist /
var /
rodas /
compartilhar / rodas-python /
* .egg-info /
.installed.cfg
*.ovo
MANIFESTO

# PyInstaller
# Normalmente, esses arquivos são escritos por um script Python a partir de um modelo
# antes de PyInstaller construir o exe, para injetar data / outras informações nele.
*.manifesto
* .spec

# Registros do instalador
pip-log.txt
pip-delete-this-directory.txt

# Teste de unidade / relatórios de cobertura
htmlcov /
.tox /
.nox /
.cobertura
.cobertura.*
.cache
nosetests.xml
cobertura.xml
*.cobrir
* .py, capa
.hipótese/
.pytest_cache /
cobrir/

# Traduções
* .mo

# Coisas do Django:

# Material do frasco:
instância/
.webassets-cache

# Scrapy stuff:
.scrapy

# Documentação Sphinx
docs / _build /

# PyBuilder
.pybuilder /
alvo/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default /
ipython_config.py

# pyenv
# Para uma biblioteca ou pacote, você pode querer ignorar esses arquivos, pois o código é
# destina-se a ser executado em vários ambientes; caso contrário, faça o check-in:
# .python-version

# pipenv
# De acordo com pypa / pipenv # 598, é recomendado incluir Pipfile.lock no controle de versão.
# No entanto, em caso de colaboração, se houver dependências ou dependências específicas da plataforma
# sem suporte multiplataforma, o pipenv pode instalar dependências que não funcionam ou não
# instale todas as dependências necessárias.
# Pipfile.lock

# PEP 582; usado por exemplo github.com/David-OConnor/pyflow
__pypackages__/

# Coisas de aipo
celerybeat-cronograma
celerybeat.pid

# SageMath arquivos analisados
* .sage.py

# Ambientes
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Configurações do projeto Spyder
.spyderproject
.spyproject

# Configurações do projeto de corda
.ropeproject

# documentação mkdocs
/local

# mypy
.mypy_cache /
.dmypy.json
dmypy.json

# Verificador de tipo de pira
.pyre /

# pytype analisador de tipo estático
.pytype /

# Símbolos de depuração do Cython
cython_debug /

# Fim de https://www.toptal.com/developers/gitignore/api/django
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/
